#!/usr/bin/env python

import pygtk
pygtk.require('2.0')

import gtk
import vte
import subprocess

class GdbInterface:
	def read_until_prompt(self):
		l = ""
		while "(gdb) \n" != l:
			l = self.p.stdout.readline()
			print l
	def __init__(self, textview):
		self.tv = textview
		self.p = subprocess.Popen("gdb -q -n -i mi", shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)
		self.read_until_prompt()
		self.tbuf = textview.get_buffer()
	def reset(self):
	#reset debugging state
		if self.p != None:
			self.p.terminate()
		self.tbuf.insert_at_cursor("reset executable done\n")
	def debug(self, f):
		if self.debugging:
			reset()
		#start debugging

class GDBG:
	def hello(self, widget, data=None):
		print "Hello World"
	def delete_event(self, widget, data=None):
		print "delete event occured"
		return False
	def destroy(self, widget, data=None):
		gtk.main_quit()
	def clipboardevent(self, clipboard, event):
		val = clipboard.wait_for_text()
		if val != None:
			self.infolabel.set_text("Do you want to debug '" + val + "' ?")
			self.curfile = val
			self.infobar.show()
	def loadfile(self, widget):
		self.gi.reset()
		self.l.set_text("Debugging "+self.curfile)
		self.infobar.hide()
	def __init__(self):
		self.curfile = None
		w = self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		w.set_border_width(5)
		w.set_default_size(600,600)
		w.connect("delete_event", self.delete_event)
		w.connect("destroy", self.destroy)

		vbox = self.main_panel = gtk.VBox()
		w.add(vbox)

		hbox = self.topbar = gtk.HBox()
		l = self.l = gtk.Label("No file loaded.")
		hbox.pack_start(l)
		vbox.pack_start(hbox, False, False, 10)

		sw = gtk.ScrolledWindow()
		sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		t = self.t = gtk.TextView()
		t.set_editable(False)
		t.set_wrap_mode(gtk.WRAP_WORD)
		sw.add(t)
		gi = self.gi = GdbInterface(t)
		self.tbuf = t.get_buffer()
		self.tbuf.set_text("Go to nautilus/file explorer and just Ctrl+C the executable you want to debug\n\n")
		vbox.pack_start(sw)

		infobar = self.infobar = gtk.HBox()
		infolabel = self.infolabel = gtk.Label("Want to debug gdbg?")
		infobar.pack_start(infolabel)
		img = gtk.Image()
		img.set_from_stock(gtk.STOCK_YES, 5)
		byes = self.byes = gtk.Button()
		byes.add(img)
		byes.connect("clicked", self.loadfile)
		infobar.pack_start(byes, False, False, 10)
		img = gtk.Image()
		img.set_from_stock(gtk.STOCK_STOP, 5)
		bno = self.bno = gtk.Button()
		bno.add(img)
		bno.connect("clicked", lambda canc: infobar.hide());
		infobar.pack_start(bno, False, False, 10)
		vbox.pack_end(infobar, False, False, 5)

		clip = self.clip = gtk.Clipboard()
		clip.connect("owner-change", self.clipboardevent)

		w.show_all()
		infobar.hide()

	def main(self):
		gtk.main()
print __name__
if __name__ == "__main__":
	app = GDBG()
	app.main()
	
