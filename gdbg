#!/usr/bin/env python

import pygtk
pygtk.require('2.0')

import gtk
import gtk.glade
import vte
import subprocess

class GdbInterface:
	def read_until_prompt(self):
		l = ""
		prompt = "(gdb) \n"
		while prompt != l:
			l = self.p.stdout.readline()
			if(l == prompt):
				self.tbuf.insert_at_cursor(l.rstrip('\n'))
			else:
				self.tbuf.insert_at_cursor(l)
			self.tv.scroll_to_mark(self.tbuf.get_insert(), 0)
	def __init__(self, textview):
		self.tv = textview
		self.p = subprocess.Popen("gdb -q -n -i mi", shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)
		self.tbuf = textview.get_buffer()
		self.read_until_prompt()
	def reset(self):
	#reset debugging state
		if self.p != None:
			self.p.terminate()
		self.tbuf.insert_at_cursor("reset executable done\n")
	def debug(self, f):
		if self.debugging:
			reset()
		#start debugging

class GDBG:
	def hello(self, widget, data=None):
		print "Hello World"
	def delete_event(self, widget, data=None):
		gtk.main_quit()
	def destroy(self, widget, data=None):
		gtk.main_quit()
	def clipboardevent(self, clipboard, event):
		val = clipboard.wait_for_text()
		if val != None:
			self.infolabel.set_text("Do you want to debug '" + val + "' ?")
			self.curfile = val
			self.infobar.show()
	def loadfile(self, widget):
		self.gi.reset()
		self.l.set_text("Debugging "+self.curfile)
		self.infobar.hide()
	def __init__(self):
		# set the gtk builder file
		self.builder = gtk.Builder()
		self.builder.add_from_file("gdbg.xml")
		self.builder.connect_signals(self)

		# initialize GDB interface
		self.gi = GdbInterface(self.builder.get_object('gdb_console'))

		self.window = self.builder.get_object('main_window')
		self.window.show_all

	def main(self):
		gtk.main()
print __name__
if __name__ == "__main__":
	app = GDBG()
	app.main()
	
